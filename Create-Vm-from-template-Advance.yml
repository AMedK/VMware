---
- name: Guest Creation
  gather_facts: no
  vars_files:
    - vcenter_vars.yml
  hosts: localhost
  tasks:
    - name: Clone a virtual machine {{ vm_name }} from existing template {{ template_name }}
      vmware_guest:
        name: "{{ vm_name }}"
        template: "{{ template_name }}"
        hostname: "{{ vcenter_server }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        validate_certs: no 
        folder: "{{ folder }}"
        datacenter: "{{ datacenter_2 }}"
        networks:
          - name: "{{ network }}"
            start_connected: True
            type: static
            device_type: e1000e
            ip: 10.118.77.112
            netmask: 255.255.255.192
          - name: "{{ network_2 }}"
            start_connected: True
            type: static
            device_type: e1000e
            ip: 168.1.95.182
            netmask: 255.255.255.240
            gateway: 168.1.95.177    
        cluster: "{{ cluster_2 }}"
        customization:
          dns_servers: "{{ dns_server }}"
        wait_for_ip_address: yes
      register: vm_result

    - name: Assert that VM is created
      assert:
      that:
        - "vm_result.changed"
        
    - name: IP address info
      debug:
        msg: "{{ vm_result.instance.hw_eth0.ipaddresses[0] }} {{ vm_name }}"  

    - name: Enable WinRM to be used with Ansible 
      local_action:
        module: vmware_vm_shell
        hostname: "{{ vcenter_server }}"
        username: Administrator@vsphere.local
        password: "{{ vsphere_password }}" 
        vm_username: Administrator
        vm_password: "{{ vm_password }}"
        vm_id: "{{ vm_name }}"
        vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
        vm_shell_args: "{{ item }}" 
      with_items:
        - '-command "& {Set-ExecutionPolicy Unrestricted}"'
        - '-command "& {Invoke-Expression ((New-Object System.Net.Webclient).DownloadString(\"https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\"))}"'
        - '-command "& {Set-ExecutionPolicy RemoteSigned}"'
        
        
    - name: change computer name to target vm name
      vmware_vm_shell:
      hostname: "{{ vcenter_server }}"
      username: Administrator@vsphere.local
      password: "{{ vsphere_password }}"
      datacenter: "{{ datacenter_2 }}"
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vmwin_adminuser }}"
      vm_password: "{{ vmwin_adminpassword }}"
      vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
      vm_shell_args: '-Command (Rename-Computer -NewName {{ vm_name }} -Force )'    
        
    - pause: seconds=10    
    
    - name: set windows license key to vm
      vmware_vm_shell:
      hostname: "{{ vc_server_ip }}"
      username: "{{ vc_username }}"
      password: "{{ vc_password }}"
      validate_certs: "{{ vc_validate_certs }}"
      datacenter: "{{ tgt_datacenter }}"
      vm_id: "{{ tgt_vm_name }}"
      vm_username: "{{ vmwin_adminuser }}"
      vm_password: "{{ vmwin_adminpassword }}"
      vm_shell: "{{ vmwin_powershellpath }}"
      vm_shell_args: '-Command (slmgr /ipk {{ vmwin_license_key }})'
    when: vmwin_license_key != ""

# Pause 5 seconds for next action
    - pause: seconds=10

# Activate Windows License Key to VM
    - name: activate windows license key to vm
      vmware_vm_shell:
      hostname: "{{ vc_server_ip }}"
      username: "{{ vc_username }}"
      password: "{{ vc_password }}"
      validate_certs: "{{ vc_validate_certs }}"
      datacenter: "{{ tgt_datacenter }}"
      vm_id: "{{ tgt_vm_name }}"
      vm_username: "{{ vmwin_adminuser }}"
      vm_password: "{{ vmwin_adminpassword }}"
      vm_shell: "{{ vmwin_powershellpath }}"
      vm_shell_args: '-Command (slmgr /ato)'
    when: vmwin_license_key != ""
    
        
    - name: Install SCOM Agent 
      vmware_vm_shell:
      hostname: "{{ vcenter_server }}"
      username: Administrator@vsphere.local
      password: "{{ vsphere_password }}" 
      datacenter: "{{ datacenter_2 }}"
      vm_username: Administrator
      vm_password: "{{ vm_password }}"
      vm_id: "{{ vm_name }}"
      vm_shell: 'c:\windows\system32\msiexec.exe'
      vm_shell_args: "{{ item }}" 
      with_items:
        - '-command "& {/i c:\windows\system32\MOMAgent.msi /qn USE_SETTINGS_FROM_AD={0|1} USE_MANUALLY_SPECIFIED_SETTINGS={0|1} MANAGEMENT_GROUP=MGname MANAGEMENT_SERVER_DNS=MSname MANAGEMENT_SERVER_AD_NAME =MSname SECURE_PORT=PortNumber ACTIONS_USE_COMPUTER_ACCOUNT={0|1} ACTIONSUSER=UserName ACTIONSDOMAIN=DomainName ACTIONSPASSWORD=Password AcceptEndUserLicenseAgreement=1}"'
           
    
    - name: Download Hardening Script from Centralized Https location and run to make sure complience requiements are met  
      vmware_vm_shell:
      hostname: "{{ vcenter_server }}"
      username: Administrator@vsphere.local
      password: "{{ vsphere_password }}"
      datacenter: "{{ datacenter_2 }}"
      vm_username: Administrator
      vm_password: "{{ vm_password }}"
      vm_id: "{{ vm_name }}"
      vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
      vm_shell_args: "{{ item }}" 
      with_items:
        - '-command "& {Set-ExecutionPolicy Unrestricted}"'
        - '-command "& {Invoke-Expression ((New-Object System.Net.Webclient).DownloadString(\"https://5g-networks.com/hardening-script.ps1\"))}"'
        - '-command "& {Set-ExecutionPolicy RemoteSigned}"'
        
    # Join to AD domian and restart

    - name: join to AD domain
      vmware_vm_shell:
      hostname: "{{ vcenter_server }}"
      username: Administrator@vsphere.local
      password: "{{ vsphere_password }}"
      datacenter: "{{ datacenter_2 }}"
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vmwin_adminuser }}"
      vm_password: "{{ vmwin_adminpassword }}"
      vm_shell: "{{ vmwin_powershellpath }}"
      vm_shell_args: '-Command "& {$pwd = ConvertTo-SecureString -AsPlainText -Force \"{{ vmwin_ad_adminpassword }}\" ; $cred = New-Object System.Management.Automation.PSCredential(\"{{ vmwin_ad_domain }}\{{ vmwin_ad_adminuser }}\",$pwd) ; Add-Computer -Domain {{ vmwin_ad_domain }} -Credential $cred ; Restart-Computer}"'
   # Pause XX seconds for completion booting VM
   ## NEED TO ADJUST
    - pause: seconds=180
    
    
    
    
    
    
